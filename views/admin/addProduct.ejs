<%- include('../partials/adminHeader.ejs') %>
<!-- Add Cropper.js CDN -->
<link rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<script src="https://unpkg.com/cropperjs/dist/cropper.min.js"></script>

<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script> -->

<section class="flex">

  <%- include('../partials/adminSlideBar.ejs') %>

  <div class=" my-auto mx-auto w-6/12">

    <form id="productForm" enctype="multipart/form-data">
      <div class="flex gap-x-6 mb-6">
        <div class="w-full relative">
          <label
            class="flex  items-center mb-2 text-gray-600 text-sm font-medium">Product
            Name <svg width="7" height="7" class="ml-1" viewBox="0 0 7 7"
              fill="none" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M3.11222 6.04545L3.20668 3.94744L1.43679 5.08594L0.894886 4.14134L2.77415 3.18182L0.894886 2.2223L1.43679 1.2777L3.20668 2.41619L3.11222 0.318182H4.19105L4.09659 2.41619L5.86648 1.2777L6.40838 2.2223L4.52912 3.18182L6.40838 4.14134L5.86648 5.08594L4.09659 3.94744L4.19105 6.04545H3.11222Z"
                fill="#EF4444" />
            </svg>
          </label>
          <input type="text" id="productname"
            class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full placeholder-gray-400 focus:outline-none "
            placeholder required>
        </div>
        <div class="w-full relative">
          <label
            class="flex  items-center mb-2 text-gray-600 text-sm font-medium">Price
            in Rupee <svg width="7" height="7" class="ml-1" viewBox="0 0 7 7"
              fill="none" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M3.11222 6.04545L3.20668 3.94744L1.43679 5.08594L0.894886 4.14134L2.77415 3.18182L0.894886 2.2223L1.43679 1.2777L3.20668 2.41619L3.11222 0.318182H4.19105L4.09659 2.41619L5.86648 1.2777L6.40838 2.2223L4.52912 3.18182L6.40838 4.14134L5.86648 5.08594L4.09659 3.94744L4.19105 6.04545H3.11222Z"
                fill="#EF4444" />
            </svg>
          </label>
          <input type="text" id="price"
            class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full placeholder-gray-400 focus:outline-none "
            placeholder required>
        </div>
      </div>

      <div class="flex gap-x-6 mb-6">
        <div class="w-full relative">
          <label
            class="flex  items-center mb-2 text-gray-600 text-sm font-medium">Description
            <svg width="7" height="7" class="ml-1" viewBox="0 0 7 7" fill="none"
              xmlns="http://www.w3.org/2000/svg">
              <path
                d="M3.11222 6.04545L3.20668 3.94744L1.43679 5.08594L0.894886 4.14134L2.77415 3.18182L0.894886 2.2223L1.43679 1.2777L3.20668 2.41619L3.11222 0.318182H4.19105L4.09659 2.41619L5.86648 1.2777L6.40838 2.2223L4.52912 3.18182L6.40838 4.14134L5.86648 5.08594L4.09659 3.94744L4.19105 6.04545H3.11222Z"
                fill="#EF4444" />
            </svg>
          </label>
          <input type="text" id="description"
            class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full placeholder-gray-400 focus:outline-none "
            placeholder required>
        </div>
        <div class="w-full relative">
          <label
            class="flex items-center mb-2 text-gray-600 text-sm font-medium">
            Category <svg width="7" height="7" class="ml-1" viewBox="0 0 7 7"
              fill="none" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M3.11222 6.04545L3.20668 3.94744L1.43679 5.08594L0.894886 4.14134L2.77415 3.18182L0.894886 2.2223L1.43679 1.2777L3.20668 2.41619L3.11222 0.318182H4.19105L4.09659 2.41619L5.86648 1.2777L6.40838 2.2223L4.52912 3.18182L6.40838 4.14134L5.86648 5.08594L4.09659 3.94744L4.19105 6.04545H3.11222Z"
                fill="#EF4444" />
            </svg>
          </label>
          <select id="category"
            class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full focus:outline-none">
            <option value disabled selected>Select a category</option>

            <%categories.forEach(category=>{ %>
            <option value="<%=category.categoryName %>">
              <%=category.categoryName %></option>
            <%}) %>

          </select>
        </div>

      </div>

      <div class="flex gap-x-6 mb-6">
        <div class="w-full relative">
          <label
            class="flex  items-center mb-2 text-gray-600 text-sm font-medium">Discount
            in percentage <svg width="7" height="7" class="ml-1"
              viewBox="0 0 7 7" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M3.11222 6.04545L3.20668 3.94744L1.43679 5.08594L0.894886 4.14134L2.77415 3.18182L0.894886 2.2223L1.43679 1.2777L3.20668 2.41619L3.11222 0.318182H4.19105L4.09659 2.41619L5.86648 1.2777L6.40838 2.2223L4.52912 3.18182L6.40838 4.14134L5.86648 5.08594L4.09659 3.94744L4.19105 6.04545H3.11222Z"
                fill="#EF4444" />
            </svg>
          </label>
          <input type="number" max="70" id="discount"
            class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full placeholder-gray-400 focus:outline-none "
            placeholder required>
        </div>

      </div>

      <!-- Variants Section (Color + Size + Stock per variant) -->
      <div class="w-full relative mb-6">
        <label class="flex items-center mb-2 text-gray-600 text-sm font-medium">
          Variants
          <svg width="7" height="7" class="ml-1" viewBox="0 0 7 7" fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <path
              d="M3.11222 6.04545L3.20668 3.94744L1.43679 5.08594L0.894886 4.14134L2.77415 3.18182L0.894886 2.2223L1.43679 1.2777L3.20668 2.41619L3.11222 0.318182H4.19105L4.09659 2.41619L5.86648 1.2777L6.40838 2.2223L4.52912 3.18182L6.40838 4.14134L5.86648 5.08594L4.09659 3.94744L4.19105 6.04545H3.11222Z"
              fill="#EF4444" />
          </svg>
        </label>
        <div id="variants-container">
          <div class="variant-row flex gap-x-2 mb-2">
            <input type="text" name="variantColor"
              class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full placeholder-gray-400 focus:outline-none"
              placeholder="Color">
            <select name="variantSize"
              class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full focus:outline-none">
              <option value disabled selected>Select size</option>
              <option value="XS">XS</option>
              <option value="S">S</option>
              <option value="M">M</option>
              <option value="L">L</option>
              <option value="XL">XL</option>
              <option value="XXL">XXL</option>
            </select>
            <input type="number" name="variantStock" min="0"
              class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full placeholder-gray-400 focus:outline-none"
              placeholder="Stock">
            <button type="button"
              class="remove-variant text-red-500 ml-2">Remove</button>
          </div>
        </div>
        <button type="button" id="add-variant"
          class="mt-2 px-3 py-1 text-white bg-indigo-500 rounded-full">Add
          Variant</button>
      </div>
      <p id="errMsg" class="text-red-500"></p>

      <label for="imageUpload"
        class="text-base text-gray-500 font-semibold mb-2 block">Upload
        file</label>
      <input type="file" id="imageUpload" accept="image/*"
        class="w-full text-gray-400 font-semibold text-sm bg-white border file:cursor-pointer cursor-pointer file:border-0 file:py-3 file:px-4 file:mr-4 file:bg-gray-100 file:hover:bg-gray-200 file:text-gray-500 rounded" />
      <p class="text-xs text-gray-400 mt-2">PNG, JPG SVG, WEBP, and GIF are
        Allowed.</p>

      <div class="flex px-4" id="imagePreview"></div>
      <!-- Container to show cropped images -->

      <!-- Modal for cropping -->
      <div id="cropModal" style="display:none;">
        <img id="cropImage" src alt="Image to Crop">
        <button id="cropButton"
          class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Crop</button>
        <button id="cancelButton"
          class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">Cancel</button>
      </div>

      <!-- ///////////////////////////////////// -->

      <button type="submit"
        class="w-52 h-12 shadow-sm rounded-full bg-indigo-600 hover:bg-indigo-800 transition-all duration-700 text-white text-base font-semibold leading-7">Submit</button>
    </form>

  </div>

</section>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://unpkg.com/cropperjs@1.5.13/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>



// Removed old Size dynamic controls







// VARIANTS dynamic add/remove //////////////////////////////////////
  const variantsContainer = document.getElementById('variants-container');
  const addVariantButton = document.getElementById('add-variant');

  addVariantButton.addEventListener('click', () => {
    const row = document.createElement('div');
    row.classList.add('variant-row', 'flex', 'gap-x-2', 'mb-2');
    row.innerHTML = `
      <input type="text" name="variantColor" class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full placeholder-gray-400 focus:outline-none" placeholder="Color">
      <select name="variantSize" class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full focus:outline-none">
          <option value="" disabled selected>Select size</option>
          <option value="XS">XS</option>
          <option value="S">S</option>
          <option value="M">M</option>
          <option value="L">L</option>
          <option value="XL">XL</option>
          <option value="XXL">XXL</option>
        </select>
      <input type="number" min="0" name="variantStock" min="0" class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full placeholder-gray-400 focus:outline-none" placeholder="Stock">
      <button type="button" class="remove-variant text-red-500 ml-2">Remove</button>
    `;
    variantsContainer.appendChild(row);
    row.querySelector('.remove-variant').addEventListener('click', () => row.remove());
  });

  // initial remove button for first row
  document.querySelectorAll('.remove-variant').forEach(btn => {
    btn.addEventListener('click', (e) => e.target.closest('.variant-row').remove());
  });



  const imageInput = document.getElementById('imageUpload');
  const imagePreview = document.getElementById('imagePreview');
  const cropModal = document.getElementById('cropModal');
  const cropImage = document.getElementById('cropImage');
  const cropButton = document.getElementById('cropButton');
  const cancelButton = document.getElementById('cancelButton');

  let cropper;
  let uploadedImages = 0;

  imageInput.addEventListener('change', function(event) {
      if (this.files.length === 1) {
          const file = this.files[0];
          const reader = new FileReader();
          reader.onload = function(e) {
              openCropModal(e.target.result);
          };
          reader.readAsDataURL(file);
      }
  });

  function openCropModal(imageUrl) {
      cropImage.src = imageUrl;
      cropModal.style.display = 'block';
      if (cropper) {
        cropper.destroy(); // destroy any existing cropper instance before initializing a new one
    }
      cropper = new Cropper(cropImage, {
          aspectRatio: 1,
          viewMode: 1
      });
  }

  cropButton.addEventListener('click', function(event) {
    event.preventDefault()
    if (!cropper) {
      console.error('Cropper not initialized!');
      return;
    }
    const croppedCanvas = cropper.getCroppedCanvas();
      // Convert the cropped canvas to a Blob
      croppedCanvas.toBlob(function(blob) {
          const formData = new FormData();
          formData.append('croppedImage', blob, 'cropped.jpg');

          // Send the Blob to the server 
          axios.post('/admin/uploadImage',formData).then(res => {
            console.log(res.data);
              if (res.data.success) {
                addCroppedImagePreview(res.data.imageUrl);
                } else {
                  Swal.fire({
       icon: "error",
        title: "Oops...",
      text: "image upload failed!"
});
                  // alert('Image upload failed.');  

                  // addCroppedImagePreview(croppedCanvas.toDataURL('image/jpeg'));
              }
          }) 
          .catch(error => {
              console.error('Error:', error);
          });
      }, 'image/jpeg');
      
      cropModal.style.display = 'none';
      cropper.destroy();
  });

  cancelButton.addEventListener('click', function() {
      cropModal.style.display = 'none';
      cropper.destroy();
  });

  // Declare an array to store image URLs
  let imageSrcArray = [];

  function addCroppedImagePreview(imageSrc) {
      const croppedImageContainer = document.createElement('div');
      croppedImageContainer.classList.add('image-container', 'relative', 'mr-4', 'mb-4');

      const croppedImage = document.createElement('img');
      croppedImage.src = imageSrc;
      croppedImage.classList.add('w-24', 'h-24', 'rounded', 'shadow-md');
      croppedImageContainer.appendChild(croppedImage);

      const removeButton = document.createElement('button');
      removeButton.textContent = 'Remove';
      removeButton.classList.add('absolute', 'top-0', 'right-0', 'bg-red-500', 'hover:bg-red-700', 'text-white', 'font-bold', 'py-1', 'px-2', 'rounded-full', 'm-2', 'text-xs');
      croppedImageContainer.appendChild(removeButton);

      imagePreview.appendChild(croppedImageContainer);

       // Add the image source to the array
      imageSrcArray.push(imageSrc);


      removeButton.addEventListener('click', function() {
          imagePreview.removeChild(croppedImageContainer);
          uploadedImages--;
          imageInput.disabled = false;

           // Remove the image source from the array
        const index = imageSrcArray.indexOf(imageSrc);
        if (index > -1) {
            imageSrcArray.splice(index, 1); // Remove the image URL from the array
        }
      });

      uploadedImages++;
      checkMinimumImages();
  }

  function checkMinimumImages() {
      if (uploadedImages >= 3) {
          imageInput.disabled = true;

        const Toast = Swal.mixin({
        toast: true,
        position: "top-end",
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
          toast.onmouseenter = Swal.stopTimer;
          toast.onmouseleave = Swal.resumeTimer;
        }
      });
      Toast.fire({
        icon: "success",
        title: " minimum 3 images are uploaded"
      });


      } else {
          imageInput.value = "";
      }
  }







  function validateProductForm() {
    const productName=document.getElementById('productname').value.trim();
    const price = document.getElementById('price').value.trim();
    const description = document.getElementById('description').value.trim();
    // const quantity = document.getElementById('quantity').value.trim();
    const discount = document.getElementById('discount').value.trim();
    // removed outer stock
    const category = document.getElementById('category').value.trim();
    

    // Clear previous error messages
    const errshow = document.getElementById('errMsg');
    errshow.innerHTML = ''; 

    // Validate Product Name
    const productNameRegex = /^[A-Za-z]/; // Starts with a letter
    if (!productNameRegex.test(productName)) {
        errshow.innerHTML = "Product name must start with a letter.";
        return false; // Validation failed
    }

    // Validate Price
    if (isNaN(price) || parseFloat(price) < 0) {
        errshow.innerHTML = "Price must be a positive number.";
        return false; // Validation failed
    }


    // Validate Discount
    if (isNaN(discount) || parseFloat(discount) < 0 || parseFloat(discount) > 100) {
        errshow.innerHTML = "Discount must be a number between 0 and 100.";
        return false; // Validation failed
    }

    // removed outer stock validation

    // Validate variant rows (no duplicate color+size; numeric stock)
    const variantRows = Array.from(document.querySelectorAll('.variant-row'));
    const seenCombos = new Set();
    for (const row of variantRows) {
      const vColor = row.querySelector('input[name="variantColor"]').value.trim();
      const vSize = row.querySelector('select[name="variantSize"]').value.trim();
      const vStockStr = row.querySelector('input[name="variantStock"]').value.trim();
      if (vColor || vSize || vStockStr) {
        if (!vColor || !vSize) {
          errshow.innerHTML = "Each variant needs both color and size.";
          return false;
        }
        const vStock = Number(vStockStr || '0');
        if (!Number.isInteger(vStock) || vStock < 0) {
          errshow.innerHTML = "Variant stock must be a non-negative integer.";
          return false;
        }
        const key = `${vColor.toLowerCase()}__${vSize.toLowerCase()}`;
        if (seenCombos.has(key)) {
          errshow.innerHTML = "Duplicate variant (color + size) not allowed.";
          return false;
        }
        seenCombos.add(key);
      }
    }
    if(!category){
      errshow.innerHTML = "Select any category";
        return false; // Validation failed
    }
    // No sizes validation anymore

    // Clear error messages and return success if all checks pass
    errshow.innerHTML = "Validation successful";
    return true; // Validation passed
}















document.getElementById('productForm').addEventListener('submit',function(event) {
       event.preventDefault();
      if (uploadedImages < 3) {
        const Toast = Swal.mixin({
        toast: true,
        position: "top-end",
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
          toast.onmouseenter = Swal.stopTimer;
          toast.onmouseleave = Swal.resumeTimer;
        }
      });
      Toast.fire({
        icon: "error",
        title: "Please upload at least 3 images"
      });
          // alert('Please upload at least 3 images.');
      }
      const isValid = validateProductForm();
      if (isValid && uploadedImages >2 ) {
        // Proceed with form submission or further processing
        // alert("Form is valid, proceeding with submission.");
        const Toast = Swal.mixin({
        toast: true,
        position: "top-end",
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
          toast.onmouseenter = Swal.stopTimer;
          toast.onmouseleave = Swal.resumeTimer;
        }
      });
      Toast.fire({
        icon: "success",
        title: "Form is valid, proceeding with submission."
      });
        const productName=document.getElementById('productname').value.trim();
    const price = document.getElementById('price').value.trim();
    const description = document.getElementById('description').value.trim();
    // const quantity = document.getElementById('quantity').value.trim();
    const discount = document.getElementById('discount').value.trim();
    // removed outer stock
    const category = document.getElementById('category').value.trim();

     // Collect variants from rows if provided
     const variantColors = Array.from(document.querySelectorAll('[name="variantColor"]')).map(i => i.value.trim()).filter(v => v !== '');
     const variantSizes = Array.from(document.querySelectorAll('select[name="variantSize"]')).map(i => i.value.trim()).filter(v => v !== '');
    const variantStocks = Array.from(document.querySelectorAll('input[name="variantStock"]')).map(i => i.value).filter(v => v !== '');
     let variants = [];
     if (variantColors.length || variantSizes.length || variantStocks.length) {
       const rows = document.querySelectorAll('.variant-row');
       variants = Array.from(rows).map(r => {
         const vc = r.querySelector('input[name="variantColor"]').value.trim();
         const vs = r.querySelector('select[name="variantSize"]').value.trim();
         const vst = r.querySelector('input[name="variantStock"]').value.trim();
         return vc && vs ? { color: vc, size: vs, stock: Number(vst || 0) } : null;
       }).filter(Boolean);
     }

    // Variants must be provided via rows (no fallback)

        axios.post('/admin/addProduct',{ productName,price,description,discount,
          category,
          variants,
          images: imageSrcArray  // Include the image URLs
        })
        .then(data=>{
          setTimeout(()=>{
            window.location.href = "/admin/productlist"
              },2000)
        }).catch(data=>{
          console.log(data);
        })
    }



  });
</script>
